// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Furniture {
  id             String           @id @default(uuid())
  name           String
  color          String?
  type           String
  stock          Int
  dailyRate      Decimal          @db.Decimal(10, 2)
  isActive       Boolean          @default(true)
  comboFurniture ComboFurniture[]
  rentalItem     RentalItem[]

  @@map("furniture")
}

model Combo {
  id        String  @id @default(uuid())
  name      String
  dailyRate Float
  isActive  Boolean

  // Relations
  ComboFurniture ComboFurniture[]
  RentalItem     RentalItem[]

  @@map("combos")
}

model ComboFurniture {
  id          String @id @default(uuid())
  quantity    Int
  comboId     String
  furnitureId String

  // Relations
  combo     Combo     @relation(fields: [comboId], references: [id])
  furniture Furniture @relation(fields: [furnitureId], references: [id])

  @@map("combo_furniture")
}

model Client {
  id               String  @id @default(uuid())
  name             String
  phone            String
  latitude         Float
  longitude        Float
  addressReference String
  notes            String?
  isActive         Boolean @default(true)

  // Relations
  rentals Rental[]

  @@map("clients")
}

model Rental {
  id                       String       @id @default(uuid())
  clientId                 String
  startDate                DateTime
  endDate                  DateTime
  rentalStatus             RentalStatus @default(PENDING)
  totalAmount              Decimal      @db.Decimal(10, 2)
  depositAmount            Decimal?      @db.Decimal(10, 2)
  notes                    String?
  secondaryDeliveryAddress String?

  // Relations
  client      Client       @relation(fields: [clientId], references: [id])
  rentalItems RentalItem[]

  @@map("rentals")
}

model RentalItem {
  id          String  @id @default(uuid())
  rentalId    String
  quantity    Int
  furnitureId String?
  comboId     String?

  // Relations
  rental    Rental     @relation(fields: [rentalId], references: [id])
  furniture Furniture? @relation(fields: [furnitureId], references: [id])
  combo     Combo?     @relation(fields: [comboId], references: [id])

  @@map("rental_items")
}

enum RentalStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}
